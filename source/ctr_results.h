/**
 * NetPass
 * Copyright (C) 2025 Sorunome
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <stdint.h>
#include <stddef.h>

enum ctr_result_level {
	CTR_RESULT_LEVEL_SUCCESS = 0,
	CTR_RESULT_LEVEL_INFO,
	CTR_RESULT_LEVEL_STATUS = 25,
	CTR_RESULT_LEVEL_TEMPORARY,
	CTR_RESULT_LEVEL_PERMANENT,
	CTR_RESULT_LEVEL_USAGE,
	CTR_RESULT_LEVEL_REINITIALIZE,
	CTR_RESULT_LEVEL_RESET,
	CTR_RESULT_LEVEL_FATAL,
};

enum ctr_results_module {
	CTR_RESULT_MODULE_COMMON = 0,
	CTR_RESULT_MODULE_KERNEL,
	CTR_RESULT_MODULE_UTIL,
	CTR_RESULT_MODULE_FILE_SERVER,
	CTR_RESULT_MODULE_LOADER_SERVER,
	CTR_RESULT_MODULE_TCB,
	CTR_RESULT_MODULE_OS,
	CTR_RESULT_MODULE_DBG,
	CTR_RESULT_MODULE_DMNT,
	CTR_RESULT_MODULE_PDN,
	CTR_RESULT_MODULE_GSP,
	CTR_RESULT_MODULE_I2C,
	CTR_RESULT_MODULE_GPIO,
	CTR_RESULT_MODULE_DD,
	CTR_RESULT_MODULE_CODEC,
	CTR_RESULT_MODULE_SPI,
	CTR_RESULT_MODULE_PXI,
	CTR_RESULT_MODULE_FS,
	CTR_RESULT_MODULE_DI,
	CTR_RESULT_MODULE_HID,
	CTR_RESULT_MODULE_CAM,
	CTR_RESULT_MODULE_PI,
	CTR_RESULT_MODULE_PM,
	CTR_RESULT_MODULE_PM_LOW,
	CTR_RESULT_MODULE_FSI,
	CTR_RESULT_MODULE_SRV,
	CTR_RESULT_MODULE_NDM,
	CTR_RESULT_MODULE_NWM,
	CTR_RESULT_MODULE_SOC,
	CTR_RESULT_MODULE_LDR,
	CTR_RESULT_MODULE_ACC,
	CTR_RESULT_MODULE_ROMFS,
	CTR_RESULT_MODULE_AM,
	CTR_RESULT_MODULE_HIO,
	CTR_RESULT_MODULE_UPD,
	CTR_RESULT_MODULE_MIC,
	CTR_RESULT_MODULE_FND,
	CTR_RESULT_MODULE_MP,
	CTR_RESULT_MODULE_MPWL,
	CTR_RESULT_MODULE_AC,
	CTR_RESULT_MODULE_HTTP,
	CTR_RESULT_MODULE_DSP,
	CTR_RESULT_MODULE_SND,
	CTR_RESULT_MODULE_DLP,
	CTR_RESULT_MODULE_HIO_LOW,
	CTR_RESULT_MODULE_CSND,
	CTR_RESULT_MODULE_SSL,
	CTR_RESULT_MODULE_AM_LOW,
	CTR_RESULT_MODULE_NEX,
	CTR_RESULT_MODULE_FRD,
	CTR_RESULT_MODULE_RDT,
	CTR_RESULT_MODULE_APP,
	CTR_RESULT_MODULE_NIM,
	CTR_RESULT_MODULE_PTM,
	CTR_RESULT_MODULE_MIDI,
	CTR_RESULT_MODULE_MC,
	CTR_RESULT_MODULE_SWC,
	CTR_RESULT_MODULE_FATFS,
	CTR_RESULT_MODULE_NGC,
	CTR_RESULT_MODULE_CARD,
	CTR_RESULT_MODULE_CARD_NOR,
	CTR_RESULT_MODULE_SDMC,
	CTR_RESULT_MODULE_BOSS,
	CTR_RESULT_MODULE_DBM,
	CTR_RESULT_MODULE_CFG,
	CTR_RESULT_MODULE_PS,
	CTR_RESULT_MODULE_CEC,
	CTR_RESULT_MODULE_IR,
	CTR_RESULT_MODULE_UDS,
	CTR_RESULT_MODULE_PL,
	CTR_RESULT_MODULE_CUP,
	CTR_RESULT_MODULE_GYRO,
	CTR_RESULT_MODULE_MCU,
	CTR_RESULT_MODULE_NS,
	CTR_RESULT_MODULE_NEWS,
	CTR_RESULT_MODULE_RO,
	CTR_RESULT_MODULE_GD,
	CTR_RESULT_MODULE_CARD_SPI,
	CTR_RESULT_MODULE_EC,
	CTR_RESULT_MODULE_WEB_BROWSER,
	CTR_RESULT_MODULE_TEST,
	CTR_RESULT_MODULE_ENC,
	CTR_RESULT_MODULE_PIA,
	CTR_RESULT_MODULE_ACT,
	CTR_RESULT_MODULE_VCTL,
	CTR_RESULT_MODULE_OLV,
	CTR_RESULT_MODULE_NEIA,
	CTR_RESULT_MODULE_NPNS,
	
	CTR_RESULT_MODULE_RESERVED0,
	CTR_RESULT_MODULE_RESERVED1,
	
	CTR_RESULT_MODULE_AVD,
	CTR_RESULT_MODULE_L2B,
	CTR_RESULT_MODULE_MVD,
	CTR_RESULT_MODULE_NFC,
	CTR_RESULT_MODULE_UART,
	CTR_RESULT_MODULE_SPM,
	CTR_RESULT_MODULE_QTM,
	CTR_RESULT_MODULE_NFP,
	CTR_RESULT_MODULE_NPT,
	
	CTR_RESULT_MODULE_APPLICATION = 254,
	CTR_RESULT_MODULE_INVALID,
};

enum ctr_results_summary {
	CTR_RESULT_SUMMARY_SUCCESS = 0,
	CTR_RESULT_SUMMARY_NOTHING_HAPPENED,
	CTR_RESULT_SUMMARY_WOULD_BLOCK,
	CTR_RESULT_SUMMARY_OUT_OF_RESOURCE,
	CTR_RESULT_SUMMARY_NOT_FOUND,
	CTR_RESULT_SUMMARY_INVALID_STATE,
	CTR_RESULT_SUMMARY_NOT_SUPPORTED,
	CTR_RESULT_SUMMARY_INVALID_ARGUMENT,
	CTR_RESULT_SUMMARY_WRONG_ARGUMENT,
	CTR_RESULT_SUMMARY_CANCELED,
	CTR_RESULT_SUMMARY_STATUS_CHANGED,
	CTR_RESULT_SUMMARY_INTERNAL,
	CTR_RESULT_SUMMARY_INVALID = 63,
};

enum ctr_results_description {
	CTR_RESULT_DESCRIPTION_INVALID_SELECTION = 1000,
	CTR_RESULT_DESCRIPTION_TOO_LARGE,
	CTR_RESULT_DESCRIPTION_NOT_AUTHORIZED,
	CTR_RESULT_DESCRIPTION_ALREADY_DONE,
	CTR_RESULT_DESCRIPTION_INVALID_SIZE,
	CTR_RESULT_DESCRIPTION_INVALID_ENUM_VALUE,
	CTR_RESULT_DESCRIPTION_INVALID_COMBINATION,
	CTR_RESULT_DESCRIPTION_NO_DATA,
	CTR_RESULT_DESCRIPTION_BUSY,
	CTR_RESULT_DESCRIPTION_MISALIGNED_ADDRESS,
	CTR_RESULT_DESCRIPTION_MISALIGNED_SIZE,
	CTR_RESULT_DESCRIPTION_OUT_OF_MEMORY,
	CTR_RESULT_DESCRIPTION_NOT_IMPLEMENTED,
	CTR_RESULT_DESCRIPTION_INVALID_ADDRESS,
	CTR_RESULT_DESCRIPTION_INVALID_POINTER,
	CTR_RESULT_DESCRIPTION_INVALID_HANDLE,
	CTR_RESULT_DESCRIPTION_NOT_INITIALIZED,
	CTR_RESULT_DESCRIPTION_ALREADY_INITIALIZED,
	CTR_RESULT_DESCRIPTION_NOT_FOUND,
	CTR_RESULT_DESCRIPTION_CANCEL_REQUEST,
	CTR_RESULT_DESCRIPTION_ALREADY_EXISTS,
	CTR_RESULT_DESCRIPTION_OUT_OF_RANGE,
	CTR_RESULT_DESCRIPTION_TIMEOUT,
	CTR_RESULT_DESCRIPTION_INVALID,
};

int32_t make_result(int level, int summary, int module, int description);
void set_application_desc_map(int size, const char** str_map, const char** desc_map);

const char* get_level_string(int32_t res);
const char* get_level_description(int32_t res);
void get_level_formatted(char* dest, size_t size, int32_t res);
const char* get_summary_string(int32_t res);
const char* get_summary_description(int32_t res);
void get_summary_formatted(char* dest, size_t size, int32_t res);
const char* get_module_string(int32_t res);
const char* get_module_description(int32_t res);
void get_module_formatted(char* dest, size_t size, int32_t res);
const char* get_description_string(int32_t res);
const char* get_description_description(int32_t res);
void get_description_formatted(char* dest, size_t size, int32_t res);
